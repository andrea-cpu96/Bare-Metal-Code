
ESP01_WebCarController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000abc  08000abc  00010ac4  2**0
                  CONTENTS
  4 .ARM          00000000  08000abc  08000abc  00010ac4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000abc  08000ac4  00010ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000abc  08000abc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac0  08000ac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ac4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ac4  00020068  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ac4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d07  00000000  00000000  00010aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000552  00000000  00000000  000117f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00011d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00011eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b49  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000198e  00000000  00000000  00013b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007225  00000000  00000000  000154a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c6cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003fc  00000000  00000000  0001c71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a84 	.word	0x08000a84

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000a84 	.word	0x08000a84

08000204 <HardFault_Handler>:

#include "int.h"


void HardFault_Handler()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// Check the call stack
	// Check exception faults

	// Error loop

	while(1);
 8000208:	e7fe      	b.n	8000208 <HardFault_Handler+0x4>

0800020a <SysTick_Handler>:

}

void SysTick_Handler(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0

	SysTick_CallBack();
 800020e:	f000 f955 	bl	80004bc <SysTick_CallBack>

}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	Uart_IRQHandler(&huart1);
 800021c:	4802      	ldr	r0, [pc, #8]	; (8000228 <USART1_IRQHandler+0x10>)
 800021e:	f000 fb48 	bl	80008b2 <Uart_IRQHandler>

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	2000001c 	.word	0x2000001c

0800022c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	Uart_IRQHandler(&huart2);
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <USART2_IRQHandler+0x10>)
 8000232:	f000 fb3e 	bl	80008b2 <Uart_IRQHandler>

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000003c 	.word	0x2000003c

08000240 <WWDG_IRQHandler>:

void WWDG_IRQHandler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

	while(1);
 8000244:	e7fe      	b.n	8000244 <WWDG_IRQHandler+0x4>

08000246 <UsageFault_Handler>:

}

void UsageFault_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

	while(1);
 800024a:	e7fe      	b.n	800024a <UsageFault_Handler+0x4>

0800024c <main>:

uint32_t delayTimeStamp;


int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0

	huart1.uart_Istance = UART_1;
 8000252:	4b8f      	ldr	r3, [pc, #572]	; (8000490 <main+0x244>)
 8000254:	4a8f      	ldr	r2, [pc, #572]	; (8000494 <main+0x248>)
 8000256:	601a      	str	r2, [r3, #0]
	huart2.uart_Istance = UART_2;
 8000258:	4b8f      	ldr	r3, [pc, #572]	; (8000498 <main+0x24c>)
 800025a:	4a90      	ldr	r2, [pc, #576]	; (800049c <main+0x250>)
 800025c:	601a      	str	r2, [r3, #0]


	// System configurations
	System_Config();
 800025e:	f000 f965 	bl	800052c <System_Config>

	// Uart configuration
	uart_Init_It(&huart1);
 8000262:	488b      	ldr	r0, [pc, #556]	; (8000490 <main+0x244>)
 8000264:	f000 faa2 	bl	80007ac <uart_Init_It>
	uart_Init_It(&huart2);
 8000268:	488b      	ldr	r0, [pc, #556]	; (8000498 <main+0x24c>)
 800026a:	f000 fa9f 	bl	80007ac <uart_Init_It>


	uart_Start_Tx_It(&huart2, (uint8_t *)"Communication started:\r\n", 24);
 800026e:	2218      	movs	r2, #24
 8000270:	498b      	ldr	r1, [pc, #556]	; (80004a0 <main+0x254>)
 8000272:	4889      	ldr	r0, [pc, #548]	; (8000498 <main+0x24c>)
 8000274:	f000 facf 	bl	8000816 <uart_Start_Tx_It>
	uart_Start_Rx_It(&huart1, &c, 1);
 8000278:	2201      	movs	r2, #1
 800027a:	498a      	ldr	r1, [pc, #552]	; (80004a4 <main+0x258>)
 800027c:	4884      	ldr	r0, [pc, #528]	; (8000490 <main+0x244>)
 800027e:	f000 faf5 	bl	800086c <uart_Start_Rx_It>

	uint32_t *pGPIOXODR = (uint32_t *)( (uint32_t)0x40020000U + (uint32_t)0x14 );
 8000282:	4b89      	ldr	r3, [pc, #548]	; (80004a8 <main+0x25c>)
 8000284:	607b      	str	r3, [r7, #4]
	{


		// Loop here until the user enter a new command

		if(CharacterReceived)
 8000286:	4b89      	ldr	r3, [pc, #548]	; (80004ac <main+0x260>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <main+0x3a>
		{

			CharacterReceived = 0; // Reset of the flag
 800028e:	4b87      	ldr	r3, [pc, #540]	; (80004ac <main+0x260>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]


				switch(commandNumber)
 8000294:	4b86      	ldr	r3, [pc, #536]	; (80004b0 <main+0x264>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3b0a      	subs	r3, #10
 800029a:	2b2b      	cmp	r3, #43	; 0x2b
 800029c:	d85a      	bhi.n	8000354 <main+0x108>
 800029e:	a201      	add	r2, pc, #4	; (adr r2, 80002a4 <main+0x58>)
 80002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a4:	0800045b 	.word	0x0800045b
 80002a8:	08000355 	.word	0x08000355
 80002ac:	08000355 	.word	0x08000355
 80002b0:	0800045b 	.word	0x0800045b
 80002b4:	08000355 	.word	0x08000355
 80002b8:	08000355 	.word	0x08000355
 80002bc:	08000355 	.word	0x08000355
 80002c0:	08000355 	.word	0x08000355
 80002c4:	08000355 	.word	0x08000355
 80002c8:	08000355 	.word	0x08000355
 80002cc:	08000355 	.word	0x08000355
 80002d0:	08000355 	.word	0x08000355
 80002d4:	08000355 	.word	0x08000355
 80002d8:	08000355 	.word	0x08000355
 80002dc:	08000355 	.word	0x08000355
 80002e0:	08000355 	.word	0x08000355
 80002e4:	08000355 	.word	0x08000355
 80002e8:	08000355 	.word	0x08000355
 80002ec:	08000355 	.word	0x08000355
 80002f0:	08000355 	.word	0x08000355
 80002f4:	08000355 	.word	0x08000355
 80002f8:	08000355 	.word	0x08000355
 80002fc:	08000355 	.word	0x08000355
 8000300:	08000355 	.word	0x08000355
 8000304:	08000355 	.word	0x08000355
 8000308:	08000355 	.word	0x08000355
 800030c:	08000355 	.word	0x08000355
 8000310:	08000355 	.word	0x08000355
 8000314:	08000355 	.word	0x08000355
 8000318:	08000355 	.word	0x08000355
 800031c:	08000355 	.word	0x08000355
 8000320:	08000355 	.word	0x08000355
 8000324:	08000355 	.word	0x08000355
 8000328:	08000355 	.word	0x08000355
 800032c:	08000355 	.word	0x08000355
 8000330:	08000355 	.word	0x08000355
 8000334:	08000355 	.word	0x08000355
 8000338:	08000355 	.word	0x08000355
 800033c:	08000355 	.word	0x08000355
 8000340:	08000363 	.word	0x08000363
 8000344:	080003a1 	.word	0x080003a1
 8000348:	08000355 	.word	0x08000355
 800034c:	080003df 	.word	0x080003df
 8000350:	0800041d 	.word	0x0800041d
				{

					default:
					case STOP:

						*pGPIOXODR &= ~( 0x000018C0U );
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f423 52c6 	bic.w	r2, r3, #6336	; 0x18c0
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	601a      	str	r2, [r3, #0]

						break;
 8000360:	e07c      	b.n	800045c <main+0x210>

					case GO_AHEAD:

						*pGPIOXODR &= ~( 0x000018C0U );
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f423 52c6 	bic.w	r2, r3, #6336	; 0x18c0
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	601a      	str	r2, [r3, #0]

						*pGPIOXODR |= ( 1 << 6 );
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 7 );
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]

						*pGPIOXODR |= ( 1 << 11 );
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 12 );
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]

						break;
 800039e:	e05d      	b.n	800045c <main+0x210>

					case GO_BACK:

						*pGPIOXODR &= ~( 0x000018C0U );
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f423 52c6 	bic.w	r2, r3, #6336	; 0x18c0
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]

						*pGPIOXODR &= ~( 1 << 6 );
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	601a      	str	r2, [r3, #0]
						*pGPIOXODR |= ( 1 << 7 );
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	601a      	str	r2, [r3, #0]

						*pGPIOXODR &= ~( 1 << 11 );
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
						*pGPIOXODR |= ( 1 << 12 );
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	601a      	str	r2, [r3, #0]

						break;
 80003dc:	e03e      	b.n	800045c <main+0x210>

					case TURN_RIGHT:

						*pGPIOXODR &= ~( 0x000018C0U );
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f423 52c6 	bic.w	r2, r3, #6336	; 0x18c0
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]

						*pGPIOXODR &= ~( 1 << 6 );
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 7 );
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]

						*pGPIOXODR |= ( 1 << 11 );
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 12 );
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]

						break;
 800041a:	e01f      	b.n	800045c <main+0x210>

					case TURN_LEFT:

						*pGPIOXODR &= ~( 0x000018C0U );
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f423 52c6 	bic.w	r2, r3, #6336	; 0x18c0
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]

						*pGPIOXODR |= ( 1 << 6 );
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 7 );
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	601a      	str	r2, [r3, #0]

						*pGPIOXODR &= ~( 1 << 11 );
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	601a      	str	r2, [r3, #0]
						*pGPIOXODR &= ~( 1 << 12 );
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	601a      	str	r2, [r3, #0]

						break;
 8000458:	e000      	b.n	800045c <main+0x210>

					case GARBAGE1:
					case GARBAGE2:
						break;
 800045a:	bf00      	nop

				}

				delayTimeStamp = Get_SystemTimeMs();
 800045c:	f000 f97e 	bl	800075c <Get_SystemTimeMs>
 8000460:	4603      	mov	r3, r0
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <main+0x268>)
 8000464:	6013      	str	r3, [r2, #0]

				while(Compare_SystemTimeMs(delayTimeStamp) < 1000);
 8000466:	bf00      	nop
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <main+0x268>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f97f 	bl	8000770 <Compare_SystemTimeMs>
 8000472:	4603      	mov	r3, r0
 8000474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000478:	d3f6      	bcc.n	8000468 <main+0x21c>

				uart_Start_Tx_It(&huart2, (uint8_t *)"\n\r", 2);
 800047a:	2202      	movs	r2, #2
 800047c:	490e      	ldr	r1, [pc, #56]	; (80004b8 <main+0x26c>)
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <main+0x24c>)
 8000480:	f000 f9c9 	bl	8000816 <uart_Start_Tx_It>
				uart_Start_Rx_It(&huart1, &c, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	4907      	ldr	r1, [pc, #28]	; (80004a4 <main+0x258>)
 8000488:	4801      	ldr	r0, [pc, #4]	; (8000490 <main+0x244>)
 800048a:	f000 f9ef 	bl	800086c <uart_Start_Rx_It>
		if(CharacterReceived)
 800048e:	e6fa      	b.n	8000286 <main+0x3a>
 8000490:	2000001c 	.word	0x2000001c
 8000494:	40011000 	.word	0x40011000
 8000498:	2000003c 	.word	0x2000003c
 800049c:	40004400 	.word	0x40004400
 80004a0:	08000a9c 	.word	0x08000a9c
 80004a4:	2000005c 	.word	0x2000005c
 80004a8:	40020014 	.word	0x40020014
 80004ac:	2000005d 	.word	0x2000005d
 80004b0:	2000005e 	.word	0x2000005e
 80004b4:	20000060 	.word	0x20000060
 80004b8:	08000ab8 	.word	0x08000ab8

080004bc <SysTick_CallBack>:


}

void SysTick_CallBack(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

	SysTickCountMs++;
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <SysTick_CallBack+0x18>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a03      	ldr	r2, [pc, #12]	; (80004d4 <SysTick_CallBack+0x18>)
 80004c8:	6013      	str	r3, [r2, #0]

}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000064 	.word	0x20000064

080004d8 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(uartHandler_t *huart, uint8_t event)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]


	if(event == USART_EVENT_RX_CMPLT)
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d111      	bne.n	800050e <USART_ApplicationEventCallback+0x36>
	{

		// Check which uart issued the interrupt
		if(huart->uart_Istance == huart1.uart_Istance)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <USART_ApplicationEventCallback+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d10b      	bne.n	800050e <USART_ApplicationEventCallback+0x36>
		{

			// Print out the command entered

			uart_Start_Tx_It(&huart2, &c, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4908      	ldr	r1, [pc, #32]	; (800051c <USART_ApplicationEventCallback+0x44>)
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <USART_ApplicationEventCallback+0x48>)
 80004fc:	f000 f98b 	bl	8000816 <uart_Start_Tx_It>

			commandNumber = c;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <USART_ApplicationEventCallback+0x44>)
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <USART_ApplicationEventCallback+0x4c>)
 8000506:	701a      	strb	r2, [r3, #0]


			CharacterReceived = 1; // Flag for next character
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <USART_ApplicationEventCallback+0x50>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
		}


	}

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000001c 	.word	0x2000001c
 800051c:	2000005c 	.word	0x2000005c
 8000520:	2000003c 	.word	0x2000003c
 8000524:	2000005e 	.word	0x2000005e
 8000528:	2000005d 	.word	0x2000005d

0800052c <System_Config>:
 * processor peripherals configuration;
 * port configurations;
 *
*/
void System_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	systemClock_Init();
 8000530:	f000 f8ca 	bl	80006c8 <systemClock_Init>

	SysTick_Init();
 8000534:	f000 f806 	bl	8000544 <SysTick_Init>

	port_Init();
 8000538:	f000 f82a 	bl	8000590 <port_Init>

	peripherals_Init();
 800053c:	f000 f8ca 	bl	80006d4 <peripherals_Init>

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SysTick_Init>:


void SysTick_Init(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0

	uint32_t *pSysTickCSR  = (uint32_t *)0xE000E010U;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <SysTick_Init+0x44>)
 800054c:	60fb      	str	r3, [r7, #12]

	// [2] internal clock source ; [1] enable SysTick exception ; [0] enable counter

	*pSysTickCSR |= (7 << 0);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f043 0207 	orr.w	r2, r3, #7
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]

	// Reload value
	// 1ms

	uint32_t reload = 16000 - 1; // 16Mhz [system clock] * 1ms [Systick exception]
 800055a:	f643 637f 	movw	r3, #15999	; 0x3e7f
 800055e:	60bb      	str	r3, [r7, #8]

	uint32_t *pSysTickRVR = (uint32_t *)0xE000E014U;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <SysTick_Init+0x48>)
 8000562:	607b      	str	r3, [r7, #4]

	*pSysTickRVR &= ~(0x00FFFFFF); // Clear
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	601a      	str	r2, [r3, #0]
	*pSysTickRVR |= (reload); // Set
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]

}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000e010 	.word	0xe000e010
 800058c:	e000e014 	.word	0xe000e014

08000590 <port_Init>:


void port_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
	// PIN_12 -> LEFT WHEEL CTRL 2
	//

	// Enable clock GPIOA

	uint32_t *RCCBaseAddr = (uint32_t *)0x40023800U;
 8000596:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <port_Init+0x130>)
 8000598:	61fb      	str	r3, [r7, #28]

	uint32_t *pRCCAHB1ENR = (uint32_t *)( (uint32_t)RCCBaseAddr + (uint32_t)0x30U );
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3330      	adds	r3, #48	; 0x30
 800059e:	61bb      	str	r3, [r7, #24]

	*pRCCAHB1ENR |= (1 << 0);
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f043 0201 	orr.w	r2, r3, #1
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	601a      	str	r2, [r3, #0]


	uint32_t *pGPIOABaseAddr = (uint32_t *)0x40020000U;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <port_Init+0x134>)
 80005ae:	617b      	str	r3, [r7, #20]

	// PIN_9 configuration

	// MODER

	uint32_t *pGPIOMODER = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x00U );
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]

	*pGPIOMODER |= ( 0x2 << (9 * 2) ); // GPIOA_9 alternate mode
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	601a      	str	r2, [r3, #0]

	// OSPEED

	uint32_t *pGPIOOSPEED = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x08U );
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3308      	adds	r3, #8
 80005c4:	60fb      	str	r3, [r7, #12]

	*pGPIOOSPEED |= ( 0x3 << ( 9 * 2 ) ); // GPIOA_9 ospeed
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 9 * 2 ) ); // GPIOA_9 pudn
*/
	// AFRH

	uint32_t *pGPIOAFRH = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x24U );
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3324      	adds	r3, #36	; 0x24
 80005d6:	60bb      	str	r3, [r7, #8]

	*pGPIOAFRH |= ( 0x7 << (1 * 4) ); // GPIOA_9 AF7 -> USART_1
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	601a      	str	r2, [r3, #0]

	// PIN_10 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (10 * 2) ); // GPIOA_10 alternate mode
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 10 * 2 ) ); // GPIOA_10 ospeed
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 10 * 2 ) ); // GPIOA_10 pudn
*/
	// AFRL

	*pGPIOAFRH |= ( 0x7 << (2 * 4) ); // GPIOA_10 AF7 -> USART_1 RX
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	601a      	str	r2, [r3, #0]

	// PIN_2 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (2 * 2) ); // GPIOA_2 alternate mode
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f043 0220 	orr.w	r2, r3, #32
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 2 * 2 ) ); // GPIOA_2 ospeed
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 2 * 2 ) ); // GPIOA_2 pudn
*/
	// AFRL

	uint32_t *pGPIOAFRL = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x20U );
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3320      	adds	r3, #32
 8000624:	607b      	str	r3, [r7, #4]

	*pGPIOAFRL |= ( 0x7 << (2 * 4) ); // GPIOA_2 AF7 -> USART_2 RX
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]

	// PIN_3 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (3 * 2) ); // GPIOA_3 alternate mode
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 3 * 2 ) ); // GPIOA_3 ospeed
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 3 * 2 ) ); // GPIOA_3 pudn
*/
	// AFRL

	*pGPIOAFRL |= ( 0x7 << (3 * 4) ); // GPIOA_3 AF7 -> USART_2 RX
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]

	// PIN_6 configuration

	// MODER

	*pGPIOMODER |= ( 0x1 << ( 6 * 2 ) ); // GPIOA_6 output
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 6 * 2 ) ); // GPIOA_6 ospeed
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	601a      	str	r2, [r3, #0]

	// PIN_7 configuration

	// MODER

	*pGPIOMODER |= ( 0x1 << ( 7 * 2 ) ); // GPIOA_7 output
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 7 * 2 ) ); // GPIOA_7 ospeed
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	601a      	str	r2, [r3, #0]

	// PIN_11 configuration

	// MODER

	*pGPIOMODER |= ( 0x1 << ( 11 * 2) ); // GPIOA_11 output
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 11 * 2 ) ); // GPIOA_11 ospeed
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	601a      	str	r2, [r3, #0]

	// PIN_12 configuration

	// MODER

	*pGPIOMODER |= ( 0x1 << ( 12 * 2) ); // GPIOA_12 output
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 12 * 2 ) ); // GPIOA_12 ospeed
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f043 7240 	orr.w	r2, r3, #50331648	; 0x3000000
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	601a      	str	r2, [r3, #0]

}
 80006b6:	bf00      	nop
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <systemClock_Init>:


void systemClock_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	uint32_t *pRCCCFGR = (uint32_t *)( (uint32_t)pRCCBaseAddr + (uint32_t)0x08U );

	*pRCCCFGR |= ( 0x02 << 2 );
	*/

}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <peripherals_Init>:

void peripherals_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
	/* UART_1 and UART_2 */


	// Enable clock for

	uint32_t *pRccBaseAddr = (uint32_t *)0x40023800U;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <peripherals_Init+0x7c>)
 80006dc:	61fb      	str	r3, [r7, #28]

	uint32_t *pRccAPB1 = (uint32_t *)( (uint32_t)pRccBaseAddr + 0x40U );
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3340      	adds	r3, #64	; 0x40
 80006e2:	61bb      	str	r3, [r7, #24]
	uint32_t *pRccAPB2 = (uint32_t *)( (uint32_t)pRccBaseAddr + 0x44U );
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	3344      	adds	r3, #68	; 0x44
 80006e8:	617b      	str	r3, [r7, #20]

	*pRccAPB1 |= ( 1 << 17 );
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	601a      	str	r2, [r3, #0]
	*pRccAPB2 |= ( 1 << 4 );
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f043 0210 	orr.w	r2, r3, #16
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	601a      	str	r2, [r3, #0]
	// Enable interrupt

	// UART1_IRQ -> 37
	// UART2_IRQ -> 38

	uint32_t *pNvicIserBaseAddr  = (uint32_t *)0xE000E100U;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <peripherals_Init+0x80>)
 8000704:	613b      	str	r3, [r7, #16]
	uint32_t *pNvicIser1 = (uint32_t *)( (uint32_t)pNvicIserBaseAddr + (uint32_t)0x04U );
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3304      	adds	r3, #4
 800070a:	60fb      	str	r3, [r7, #12]

	*pNvicIser1 |= ( 1 << 5 ); // Enable interrupt for UART1
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f043 0220 	orr.w	r2, r3, #32
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	601a      	str	r2, [r3, #0]
	*pNvicIser1 |= ( 1 << 6 ); // Enable interrupt for UART2
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	601a      	str	r2, [r3, #0]

	// Set the interrupt priority for UART1

	uint32_t *pNvicIprBaseAddr = (uint32_t *)0xE000E400U;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <peripherals_Init+0x84>)
 8000726:	60bb      	str	r3, [r7, #8]
	uint32_t *pNvicIpr9 = (uint32_t *)( (uint32_t)pNvicIprBaseAddr + (uint32_t)0x24U );
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	3324      	adds	r3, #36	; 0x24
 800072c:	607b      	str	r3, [r7, #4]

	*pNvicIpr9 |= ( 0x3 << ( ( 8 * 1 ) + 4 )); // Priority for UART_1 set to 3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
	*pNvicIpr9 |= ( 0x3 << ( ( 8 * 2 ) + 4 )); // Priority for UART_2 set to 3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]


}
 8000746:	bf00      	nop
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000e400 	.word	0xe000e400

0800075c <Get_SystemTimeMs>:
*
* Get SysTicCount
*
*/
uint32_t Get_SystemTimeMs(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

	return SysTickCountMs;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <Get_SystemTimeMs+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]

}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000064 	.word	0x20000064

08000770 <Compare_SystemTimeMs>:
*
* Compare captured value with actual
*
*/
uint32_t Compare_SystemTimeMs(uint32_t capturedTimeMs)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

	uint32_t ret = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]

	if(SysTickCountMs >= capturedTimeMs)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <Compare_SystemTimeMs+0x38>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	d805      	bhi.n	8000792 <Compare_SystemTimeMs+0x22>
		ret = SysTickCountMs - capturedTimeMs;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <Compare_SystemTimeMs+0x38>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e004      	b.n	800079c <Compare_SystemTimeMs+0x2c>
	else
		ret = capturedTimeMs - SysTickCountMs;
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <Compare_SystemTimeMs+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]

	return ret;
 800079c:	68fb      	ldr	r3, [r7, #12]

}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000064 	.word	0x20000064

080007ac <uart_Init_It>:


/********************************************** Interrupt communication mode **********************************************/

void uart_Init_It(uartHandler_t *huart)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	// USARTDIV = fck / ( 16 * 9600 ) = 8.68
	// DIV_FRACTION = 16 * 0.68 = 11 = 0xB
	// DIV_MANTISSA = 8 = 0x08
	// USART_BRR = 0x08B

	huart->uart_Istance->uart_brr = 0x08BU; // 115200 baud rate
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	228b      	movs	r2, #139	; 0x8b
 80007ba:	609a      	str	r2, [r3, #8]

	/* Control register configuration CR1 */

	// word length

	huart->uart_Istance->uart_cr1 &= ~( 1 << 12 ); // 8 bits of data
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80007ca:	60da      	str	r2, [r3, #12]

	// uart enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 13 ); // uart enabled
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007da:	60da      	str	r2, [r3, #12]

	// receiver enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 2 ); // RE
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0204 	orr.w	r2, r2, #4
 80007ea:	60da      	str	r2, [r3, #12]

	// transmission enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 3 ); // TE
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68da      	ldr	r2, [r3, #12]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0208 	orr.w	r2, r2, #8
 80007fa:	60da      	str	r2, [r3, #12]

	/* Control register configuration CR2 */

	// stop bits

	huart->uart_Istance->uart_cr2 &= ~( 0x3 << 12 );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800080a:	611a      	str	r2, [r3, #16]


}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <uart_Start_Tx_It>:


void uart_Start_Tx_It(uartHandler_t *huart, uint8_t *dataBuff, uint32_t length)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]

	if(huart->uart_TxState != UART_BUSY_IN_TX)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	7f1b      	ldrb	r3, [r3, #28]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d01b      	beq.n	8000862 <uart_Start_Tx_It+0x4c>
	{

		huart->uart_TxState = UART_BUSY_IN_TX;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2201      	movs	r2, #1
 800082e:	771a      	strb	r2, [r3, #28]
		huart->uart_dataBuffTx = dataBuff;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	605a      	str	r2, [r3, #4]
		huart->uart_IndexTx = 0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
		huart->uart_ContTx = length;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	60da      	str	r2, [r3, #12]

		// TC interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 6 ); // TCIE
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000850:	60da      	str	r2, [r3, #12]

		// TXE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 7 ); // TXEIE
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000860:	60da      	str	r2, [r3, #12]

	}

}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <uart_Start_Rx_It>:

void uart_Start_Rx_It(uartHandler_t *huart, uint8_t *dataBuff, uint32_t length)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]

	if(huart->uart_RxState != UART_BUSY_IN_RX)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	7f5b      	ldrb	r3, [r3, #29]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d013      	beq.n	80008a8 <uart_Start_Rx_It+0x3c>
	{

		huart->uart_RxState = UART_BUSY_IN_RX;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2202      	movs	r2, #2
 8000884:	775a      	strb	r2, [r3, #29]
		huart->uart_dataBuffRx = dataBuff;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	611a      	str	r2, [r3, #16]
		huart->uart_IndexRx = 0;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
		huart->uart_ContRx = length;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	619a      	str	r2, [r3, #24]

		// RXNE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 5 ); // RXNEIE
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0220 	orr.w	r2, r2, #32
 80008a6:	60da      	str	r2, [r3, #12]

	}

}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <Uart_IRQHandler>:
	huart->uart_Istance->uart_cr1 &= ~( 1 << 5 ); // RXNEIE

}

void Uart_IRQHandler(uartHandler_t *huart)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	uint32_t temp1;


	/*************************Check for TC flag ********************************************/

	temp1 = ( huart->uart_Istance->uart_sr & ( 1 << 6 ) );
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c4:	60fb      	str	r3, [r7, #12]

	if(temp1)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d021      	beq.n	8000910 <Uart_IRQHandler+0x5e>
	{

		// Interrupt due to TC flag

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7f1b      	ldrb	r3, [r3, #28]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d11d      	bne.n	8000910 <Uart_IRQHandler+0x5e>
		{

			if(huart->uart_ContTx == 0)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d119      	bne.n	8000910 <Uart_IRQHandler+0x5e>
			{

				// Close the transmission

				// Clear the TC flag (otherwise it remains 1)
				huart->uart_Istance->uart_sr &= ~( 1 << 6 );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008ea:	601a      	str	r2, [r3, #0]

				//Reset the application state
				huart->uart_TxState = UART_READY;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	771a      	strb	r2, [r3, #28]

				//Reset Buffer address to NULL
				//huart->uart_dataBuffTx = NULL;

				//Reset the length to zero
				huart->uart_ContTx = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]

				//Implement the code to clear the TCIE bit (disable interrupt for TC flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 6 );
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68da      	ldr	r2, [r3, #12]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000906:	60da      	str	r2, [r3, #12]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(huart, USART_EVENT_TX_CMPLT);
 8000908:	2100      	movs	r1, #0
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fde4 	bl	80004d8 <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = huart->uart_Istance->uart_sr & ( 1 << 7 );
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]

	if(temp1)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d026      	beq.n	8000970 <Uart_IRQHandler+0xbe>
	{

		//this interrupt is because of TXE

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7f1b      	ldrb	r3, [r3, #28]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d122      	bne.n	8000970 <Uart_IRQHandler+0xbe>
		{
			//Keep sending data until Txlen reaches to zero
			if(huart->uart_ContTx > 0)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d012      	beq.n	8000958 <Uart_IRQHandler+0xa6>
			{

					//This is 8bit data transfer
					huart->uart_Istance->uart_dr = ( huart->uart_dataBuffTx[huart->uart_IndexTx] );
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	4413      	add	r3, r2
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					huart->uart_IndexTx++;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	609a      	str	r2, [r3, #8]
					huart->uart_ContTx -= 1;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60da      	str	r2, [r3, #12]

			}

			if (huart->uart_ContTx == 0 )
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <Uart_IRQHandler+0xbe>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 7 );
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800096e:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = huart->uart_Istance->uart_sr & ( 1 << 5 );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	60fb      	str	r3, [r7, #12]

	if(temp1)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d02e      	beq.n	80009e0 <Uart_IRQHandler+0x12e>
	{

		//this interrupt is because of rxne

		if(huart->uart_RxState == UART_BUSY_IN_RX)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7f5b      	ldrb	r3, [r3, #29]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d12a      	bne.n	80009e0 <Uart_IRQHandler+0x12e>
		{
			if(huart->uart_ContRx > 0)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d013      	beq.n	80009ba <Uart_IRQHandler+0x108>
			{

				//We are going to receive 8bit data in a frame

				//read 8 bits from DR
				huart->uart_dataBuffRx[huart->uart_IndexRx] = (uint8_t)( huart->uart_Istance->uart_dr );
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6859      	ldr	r1, [r3, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4413      	add	r3, r2
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]

				//Now , increment the pRxBuffer
				huart->uart_IndexRx++;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	615a      	str	r2, [r3, #20]
				huart->uart_ContRx -= 1;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	619a      	str	r2, [r3, #24]

			}

			if(!huart->uart_ContRx )
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10e      	bne.n	80009e0 <Uart_IRQHandler+0x12e>
			{
				//disable the rxne
				huart->uart_Istance->uart_cr1 &= ~( 1 << 5 );
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f022 0220 	bic.w	r2, r2, #32
 80009d0:	60da      	str	r2, [r3, #12]
				huart->uart_RxState = UART_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	775a      	strb	r2, [r3, #29]
				USART_ApplicationEventCallback(huart, USART_EVENT_RX_CMPLT);
 80009d8:	2101      	movs	r1, #1
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fd7c 	bl	80004d8 <USART_ApplicationEventCallback>
			}
		}
	}

}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a16:	f000 f811 	bl	8000a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fc17 	bl	800024c <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a2c:	08000ac4 	.word	0x08000ac4
  ldr r2, =_sbss
 8000a30:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a34:	20000068 	.word	0x20000068

08000a38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <__libc_init_array>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	4d0d      	ldr	r5, [pc, #52]	; (8000a74 <__libc_init_array+0x38>)
 8000a40:	4c0d      	ldr	r4, [pc, #52]	; (8000a78 <__libc_init_array+0x3c>)
 8000a42:	1b64      	subs	r4, r4, r5
 8000a44:	10a4      	asrs	r4, r4, #2
 8000a46:	2600      	movs	r6, #0
 8000a48:	42a6      	cmp	r6, r4
 8000a4a:	d109      	bne.n	8000a60 <__libc_init_array+0x24>
 8000a4c:	4d0b      	ldr	r5, [pc, #44]	; (8000a7c <__libc_init_array+0x40>)
 8000a4e:	4c0c      	ldr	r4, [pc, #48]	; (8000a80 <__libc_init_array+0x44>)
 8000a50:	f000 f818 	bl	8000a84 <_init>
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	2600      	movs	r6, #0
 8000a5a:	42a6      	cmp	r6, r4
 8000a5c:	d105      	bne.n	8000a6a <__libc_init_array+0x2e>
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a64:	4798      	blx	r3
 8000a66:	3601      	adds	r6, #1
 8000a68:	e7ee      	b.n	8000a48 <__libc_init_array+0xc>
 8000a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6e:	4798      	blx	r3
 8000a70:	3601      	adds	r6, #1
 8000a72:	e7f2      	b.n	8000a5a <__libc_init_array+0x1e>
 8000a74:	08000abc 	.word	0x08000abc
 8000a78:	08000abc 	.word	0x08000abc
 8000a7c:	08000abc 	.word	0x08000abc
 8000a80:	08000ac0 	.word	0x08000ac0

08000a84 <_init>:
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	bf00      	nop
 8000a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8a:	bc08      	pop	{r3}
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	4770      	bx	lr

08000a90 <_fini>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr
