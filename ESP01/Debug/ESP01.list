
ESP01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000814  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009f4  080009f4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080009f4  080009f4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009f4  080009f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f4  080009f4  000109f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009f8  080009f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080009fc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000004  08000a00  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08000a00  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d7c  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000550  00000000  00000000  00020daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00021300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00021470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b1f  00000000  00000000  00021588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019d3  00000000  00000000  000230a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000071ec  00000000  00000000  00024a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002bc66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000418  00000000  00000000  0002bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009c0 	.word	0x080009c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080009c0 	.word	0x080009c0

08000204 <HardFault_Handler>:

#include "int.h"


void HardFault_Handler()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// Check the call stack
	// Check exception faults

	// Error loop

	while(1);
 8000208:	e7fe      	b.n	8000208 <HardFault_Handler+0x4>

0800020a <SysTick_Handler>:

}

void SysTick_Handler(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0

	SysTick_CallBack();
 800020e:	f000 f8f3 	bl	80003f8 <SysTick_CallBack>

}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	Uart_IRQHandler(&huart1);
 800021c:	4802      	ldr	r0, [pc, #8]	; (8000228 <USART1_IRQHandler+0x10>)
 800021e:	f000 fade 	bl	80007de <Uart_IRQHandler>

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000020 	.word	0x20000020

0800022c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	Uart_IRQHandler(&huart2);
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <USART2_IRQHandler+0x10>)
 8000232:	f000 fad4 	bl	80007de <Uart_IRQHandler>

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000040 	.word	0x20000040

08000240 <WWDG_IRQHandler>:

void WWDG_IRQHandler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

	while(1);
 8000244:	e7fe      	b.n	8000244 <WWDG_IRQHandler+0x4>

08000246 <UsageFault_Handler>:

}

void UsageFault_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

	while(1);
 800024a:	e7fe      	b.n	800024a <UsageFault_Handler+0x4>

0800024c <main>:
uint32_t endOfCommunicationTimeStamp;
uint32_t delayTimeStamp;


int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	huart1.uart_Istance = UART_1;
 8000250:	4b5a      	ldr	r3, [pc, #360]	; (80003bc <main+0x170>)
 8000252:	4a5b      	ldr	r2, [pc, #364]	; (80003c0 <main+0x174>)
 8000254:	601a      	str	r2, [r3, #0]
	huart2.uart_Istance = UART_2;
 8000256:	4b5b      	ldr	r3, [pc, #364]	; (80003c4 <main+0x178>)
 8000258:	4a5b      	ldr	r2, [pc, #364]	; (80003c8 <main+0x17c>)
 800025a:	601a      	str	r2, [r3, #0]


	// System configurations
	System_Config();
 800025c:	f000 f912 	bl	8000484 <System_Config>

	// Uart configuration
	uart_Init_It(&huart1);
 8000260:	4856      	ldr	r0, [pc, #344]	; (80003bc <main+0x170>)
 8000262:	f000 fa1f 	bl	80006a4 <uart_Init_It>
	uart_Init_It(&huart2);
 8000266:	4857      	ldr	r0, [pc, #348]	; (80003c4 <main+0x178>)
 8000268:	f000 fa1c 	bl	80006a4 <uart_Init_It>


	uart_Start_Tx_It(&huart2, (uint8_t *)"Enter an AT command:\r\n", 22);
 800026c:	2216      	movs	r2, #22
 800026e:	4957      	ldr	r1, [pc, #348]	; (80003cc <main+0x180>)
 8000270:	4854      	ldr	r0, [pc, #336]	; (80003c4 <main+0x178>)
 8000272:	f000 fa4c 	bl	800070e <uart_Start_Tx_It>
	uart_Start_Rx_It(&huart2, &c, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	4955      	ldr	r1, [pc, #340]	; (80003d0 <main+0x184>)
 800027a:	4852      	ldr	r0, [pc, #328]	; (80003c4 <main+0x178>)
 800027c:	f000 fa72 	bl	8000764 <uart_Start_Rx_It>


	while (1)
	{

		esp01CurrentState = esp01NextState;
 8000280:	4b54      	ldr	r3, [pc, #336]	; (80003d4 <main+0x188>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <main+0x18c>)
 8000286:	701a      	strb	r2, [r3, #0]

		switch(esp01CurrentState)
 8000288:	4b53      	ldr	r3, [pc, #332]	; (80003d8 <main+0x18c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d058      	beq.n	8000342 <main+0xf6>
			default:
			case USER_SEND_TO_ESP01:

				// Loop here until the user enter a new command

				if(CharacterReceived)
 8000290:	4b52      	ldr	r3, [pc, #328]	; (80003dc <main+0x190>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d050      	beq.n	800033a <main+0xee>
				{

					CharacterReceived = 0; // Reset of the flag
 8000298:	4b50      	ldr	r3, [pc, #320]	; (80003dc <main+0x190>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]


					if(c == '\r')
 800029e:	4b4c      	ldr	r3, [pc, #304]	; (80003d0 <main+0x184>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b0d      	cmp	r3, #13
 80002a4:	d140      	bne.n	8000328 <main+0xdc>
					{

						delayTimeStamp = Get_SystemTimeMs();
 80002a6:	f000 f9d5 	bl	8000654 <Get_SystemTimeMs>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a4c      	ldr	r2, [pc, #304]	; (80003e0 <main+0x194>)
 80002ae:	6013      	str	r3, [r2, #0]

						while(Compare_SystemTimeMs(delayTimeStamp) < 100);
 80002b0:	bf00      	nop
 80002b2:	4b4b      	ldr	r3, [pc, #300]	; (80003e0 <main+0x194>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f9d6 	bl	8000668 <Compare_SystemTimeMs>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b63      	cmp	r3, #99	; 0x63
 80002c0:	d9f7      	bls.n	80002b2 <main+0x66>

						uart_Start_Tx_It(&huart2, (uint8_t *)"\r\n", 2);
 80002c2:	2202      	movs	r2, #2
 80002c4:	4947      	ldr	r1, [pc, #284]	; (80003e4 <main+0x198>)
 80002c6:	483f      	ldr	r0, [pc, #252]	; (80003c4 <main+0x178>)
 80002c8:	f000 fa21 	bl	800070e <uart_Start_Tx_It>

						userCommand[userCommIndex] = '\n';
 80002cc:	4b46      	ldr	r3, [pc, #280]	; (80003e8 <main+0x19c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b46      	ldr	r3, [pc, #280]	; (80003ec <main+0x1a0>)
 80002d4:	210a      	movs	r1, #10
 80002d6:	5499      	strb	r1, [r3, r2]

						// Prepare for receiving data from esp01
						uart_Start_Rx_It(&huart1, esp01DataBuff, 1000);
 80002d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002dc:	4944      	ldr	r1, [pc, #272]	; (80003f0 <main+0x1a4>)
 80002de:	4837      	ldr	r0, [pc, #220]	; (80003bc <main+0x170>)
 80002e0:	f000 fa40 	bl	8000764 <uart_Start_Rx_It>

						// Little delay
						delayTimeStamp = Get_SystemTimeMs();
 80002e4:	f000 f9b6 	bl	8000654 <Get_SystemTimeMs>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a3d      	ldr	r2, [pc, #244]	; (80003e0 <main+0x194>)
 80002ec:	6013      	str	r3, [r2, #0]
						while(Compare_SystemTimeMs(delayTimeStamp) < 100);
 80002ee:	bf00      	nop
 80002f0:	4b3b      	ldr	r3, [pc, #236]	; (80003e0 <main+0x194>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f9b7 	bl	8000668 <Compare_SystemTimeMs>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b63      	cmp	r3, #99	; 0x63
 80002fe:	d9f7      	bls.n	80002f0 <main+0xa4>

						// Send to ESP01 the command the user entered
						uart_Start_Tx_It(&huart1, (uint8_t *)userCommand, userCommIndex + 1);
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <main+0x19c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	461a      	mov	r2, r3
 8000308:	4938      	ldr	r1, [pc, #224]	; (80003ec <main+0x1a0>)
 800030a:	482c      	ldr	r0, [pc, #176]	; (80003bc <main+0x170>)
 800030c:	f000 f9ff 	bl	800070e <uart_Start_Tx_It>
						userCommIndex = 0;
 8000310:	4b35      	ldr	r3, [pc, #212]	; (80003e8 <main+0x19c>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]

						endOfCommunicationTimeStamp = Get_SystemTimeMs();
 8000316:	f000 f99d 	bl	8000654 <Get_SystemTimeMs>
 800031a:	4603      	mov	r3, r0
 800031c:	4a35      	ldr	r2, [pc, #212]	; (80003f4 <main+0x1a8>)
 800031e:	6013      	str	r3, [r2, #0]

						esp01NextState = ESP01_SEND_TO_USER;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <main+0x188>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
					esp01NextState = USER_SEND_TO_ESP01;

				}


				break;
 8000326:	e048      	b.n	80003ba <main+0x16e>
						uart_Start_Rx_It(&huart2, &c, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	4929      	ldr	r1, [pc, #164]	; (80003d0 <main+0x184>)
 800032c:	4825      	ldr	r0, [pc, #148]	; (80003c4 <main+0x178>)
 800032e:	f000 fa19 	bl	8000764 <uart_Start_Rx_It>
						esp01NextState = USER_SEND_TO_ESP01;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <main+0x188>)
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
				break;
 8000338:	e03f      	b.n	80003ba <main+0x16e>
					esp01NextState = USER_SEND_TO_ESP01;
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <main+0x188>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
				break;
 8000340:	e03b      	b.n	80003ba <main+0x16e>

				// Loop here until esp01 gives a response



				if(Compare_SystemTimeMs(endOfCommunicationTimeStamp) > 10000)
 8000342:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <main+0x1a8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f98e 	bl	8000668 <Compare_SystemTimeMs>
 800034c:	4603      	mov	r3, r0
 800034e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000352:	4293      	cmp	r3, r2
 8000354:	d92d      	bls.n	80003b2 <main+0x166>
				{

					// Send data received from esp01 to serial monitor

					uart_Start_Tx_It(&huart2, esp01DataBuff, huart1.uart_IndexRx + 1);
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <main+0x170>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	3301      	adds	r3, #1
 800035c:	461a      	mov	r2, r3
 800035e:	4924      	ldr	r1, [pc, #144]	; (80003f0 <main+0x1a4>)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <main+0x178>)
 8000362:	f000 f9d4 	bl	800070e <uart_Start_Tx_It>

					delayTimeStamp = Get_SystemTimeMs();
 8000366:	f000 f975 	bl	8000654 <Get_SystemTimeMs>
 800036a:	4603      	mov	r3, r0
 800036c:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <main+0x194>)
 800036e:	6013      	str	r3, [r2, #0]

					while(Compare_SystemTimeMs(delayTimeStamp) < 1000);
 8000370:	bf00      	nop
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <main+0x194>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f976 	bl	8000668 <Compare_SystemTimeMs>
 800037c:	4603      	mov	r3, r0
 800037e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000382:	d3f6      	bcc.n	8000372 <main+0x126>

					// End uart1 communication

					uart_End_Rx_It(&huart1);
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <main+0x170>)
 8000386:	f000 fa10 	bl	80007aa <uart_End_Rx_It>
					memset(esp01DataBuff, 0, 1000);
 800038a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800038e:	2100      	movs	r1, #0
 8000390:	4817      	ldr	r0, [pc, #92]	; (80003f0 <main+0x1a4>)
 8000392:	f000 fb0d 	bl	80009b0 <memset>

					uart_Start_Tx_It(&huart2, (uint8_t *)"Enter an AT command:\r\n", 22);
 8000396:	2216      	movs	r2, #22
 8000398:	490c      	ldr	r1, [pc, #48]	; (80003cc <main+0x180>)
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <main+0x178>)
 800039c:	f000 f9b7 	bl	800070e <uart_Start_Tx_It>
					uart_Start_Rx_It(&huart2, &c, 1);
 80003a0:	2201      	movs	r2, #1
 80003a2:	490b      	ldr	r1, [pc, #44]	; (80003d0 <main+0x184>)
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <main+0x178>)
 80003a6:	f000 f9dd 	bl	8000764 <uart_Start_Rx_It>

					esp01NextState = USER_SEND_TO_ESP01;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <main+0x188>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
					esp01NextState = ESP01_SEND_TO_USER;

				}


				break;
 80003b0:	e002      	b.n	80003b8 <main+0x16c>
					esp01NextState = ESP01_SEND_TO_USER;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <main+0x188>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
				break;
 80003b8:	bf00      	nop
		esp01CurrentState = esp01NextState;
 80003ba:	e761      	b.n	8000280 <main+0x34>
 80003bc:	20000020 	.word	0x20000020
 80003c0:	40011000 	.word	0x40011000
 80003c4:	20000040 	.word	0x20000040
 80003c8:	40004400 	.word	0x40004400
 80003cc:	080009d8 	.word	0x080009d8
 80003d0:	20000060 	.word	0x20000060
 80003d4:	20000001 	.word	0x20000001
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000061 	.word	0x20000061
 80003e0:	200004b8 	.word	0x200004b8
 80003e4:	080009f0 	.word	0x080009f0
 80003e8:	200000c8 	.word	0x200000c8
 80003ec:	20000064 	.word	0x20000064
 80003f0:	200000cc 	.word	0x200000cc
 80003f4:	200004b4 	.word	0x200004b4

080003f8 <SysTick_CallBack>:
}



void SysTick_CallBack(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

	SysTickCountMs++;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_CallBack+0x18>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a03      	ldr	r2, [pc, #12]	; (8000410 <SysTick_CallBack+0x18>)
 8000404:	6013      	str	r3, [r2, #0]

}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	200004bc 	.word	0x200004bc

08000414 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(uartHandler_t *huart, uint8_t event)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]


	if(event == USART_EVENT_RX_CMPLT)
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d11e      	bne.n	8000464 <USART_ApplicationEventCallback+0x50>
	{

		// Check which uart issued the interrupt
		if(huart->uart_Istance == huart2.uart_Istance)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <USART_ApplicationEventCallback+0x58>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	429a      	cmp	r2, r3
 8000430:	d118      	bne.n	8000464 <USART_ApplicationEventCallback+0x50>
		{

			// Communication from serial monitor

			if(esp01CurrentState == USER_SEND_TO_ESP01)
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <USART_ApplicationEventCallback+0x5c>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d114      	bne.n	8000464 <USART_ApplicationEventCallback+0x50>
			{

				// Print out the character the user entered

				uart_Start_Tx_It(&huart2, &c, 1);
 800043a:	2201      	movs	r2, #1
 800043c:	490d      	ldr	r1, [pc, #52]	; (8000474 <USART_ApplicationEventCallback+0x60>)
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <USART_ApplicationEventCallback+0x58>)
 8000440:	f000 f965 	bl	800070e <uart_Start_Tx_It>

				userCommand[userCommIndex] = c;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <USART_ApplicationEventCallback+0x64>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <USART_ApplicationEventCallback+0x60>)
 800044c:	7819      	ldrb	r1, [r3, #0]
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <USART_ApplicationEventCallback+0x68>)
 8000450:	5499      	strb	r1, [r3, r2]
				userCommIndex++;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <USART_ApplicationEventCallback+0x64>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <USART_ApplicationEventCallback+0x64>)
 800045c:	701a      	strb	r2, [r3, #0]


				CharacterReceived = 1; // Flag for next character
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <USART_ApplicationEventCallback+0x6c>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]



	}

}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000040 	.word	0x20000040
 8000470:	20000000 	.word	0x20000000
 8000474:	20000060 	.word	0x20000060
 8000478:	200000c8 	.word	0x200000c8
 800047c:	20000064 	.word	0x20000064
 8000480:	20000061 	.word	0x20000061

08000484 <System_Config>:
 * processor peripherals configuration;
 * port configurations;
 *
*/
void System_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

	systemClock_Init();
 8000488:	f000 f89a 	bl	80005c0 <systemClock_Init>

	SysTick_Init();
 800048c:	f000 f806 	bl	800049c <SysTick_Init>

	port_Init();
 8000490:	f000 f82a 	bl	80004e8 <port_Init>

	peripherals_Init();
 8000494:	f000 f89a 	bl	80005cc <peripherals_Init>

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <SysTick_Init>:


void SysTick_Init(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0

	uint32_t *pSysTickCSR  = (uint32_t *)0xE000E010U;
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <SysTick_Init+0x44>)
 80004a4:	60fb      	str	r3, [r7, #12]

	// [2] internal clock source ; [1] enable SysTick exception ; [0] enable counter

	*pSysTickCSR |= (7 << 0);
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f043 0207 	orr.w	r2, r3, #7
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]

	// Reload value
	// 1ms

	uint32_t reload = 16000 - 1; // 16Mhz [system clock] * 1ms [Systick exception]
 80004b2:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80004b6:	60bb      	str	r3, [r7, #8]

	uint32_t *pSysTickRVR = (uint32_t *)0xE000E014U;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <SysTick_Init+0x48>)
 80004ba:	607b      	str	r3, [r7, #4]

	*pSysTickRVR &= ~(0x00FFFFFF); // Clear
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	601a      	str	r2, [r3, #0]
	*pSysTickRVR |= (reload); // Set
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]

}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000e010 	.word	0xe000e010
 80004e4:	e000e014 	.word	0xe000e014

080004e8 <port_Init>:


void port_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b089      	sub	sp, #36	; 0x24
 80004ec:	af00      	add	r7, sp, #0
	// PIN_3 -> USART_3 RX
	//

	// Enable clock GPIOA

	uint32_t *RCCBaseAddr = (uint32_t *)0x40023800U;
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <port_Init+0xd0>)
 80004f0:	61fb      	str	r3, [r7, #28]

	uint32_t *pRCCAHB1ENR = (uint32_t *)( (uint32_t)RCCBaseAddr + (uint32_t)0x30U );
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3330      	adds	r3, #48	; 0x30
 80004f6:	61bb      	str	r3, [r7, #24]

	*pRCCAHB1ENR |= (1 << 0);
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f043 0201 	orr.w	r2, r3, #1
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	601a      	str	r2, [r3, #0]


	uint32_t *pGPIOABaseAddr = (uint32_t *)0x40020000U;
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <port_Init+0xd4>)
 8000506:	617b      	str	r3, [r7, #20]

	// PIN_9 configuration

	// MODER

	uint32_t *pGPIOMODER = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x00U );
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	613b      	str	r3, [r7, #16]

	*pGPIOMODER |= ( 0x2 << (9 * 2) ); // GPIOA_9 alternate mode
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	601a      	str	r2, [r3, #0]

	// OSPEED

	uint32_t *pGPIOOSPEED = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x08U );
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	3308      	adds	r3, #8
 800051c:	60fb      	str	r3, [r7, #12]

	*pGPIOOSPEED |= ( 0x3 << ( 9 * 2 ) ); // GPIOA_9 ospeed
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 9 * 2 ) ); // GPIOA_9 pudn
*/
	// AFRH

	uint32_t *pGPIOAFRH = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x24U );
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3324      	adds	r3, #36	; 0x24
 800052e:	60bb      	str	r3, [r7, #8]

	*pGPIOAFRH |= ( 0x7 << (1 * 4) ); // GPIOA_9 AF7 -> USART_1
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]

	// PIN_10 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (10 * 2) ); // GPIOA_10 alternate mode
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 10 * 2 ) ); // GPIOA_10 ospeed
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 10 * 2 ) ); // GPIOA_10 pudn
*/
	// AFRL

	*pGPIOAFRH |= ( 0x7 << (2 * 4) ); // GPIOA_10 AF7 -> USART_1 RX
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	601a      	str	r2, [r3, #0]

	// PIN_2 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (2 * 2) ); // GPIOA_2 alternate mode
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f043 0220 	orr.w	r2, r3, #32
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 2 * 2 ) ); // GPIOA_2 ospeed
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 2 * 2 ) ); // GPIOA_2 pudn
*/
	// AFRL

	uint32_t *pGPIOAFRL = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x20U );
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3320      	adds	r3, #32
 800057c:	607b      	str	r3, [r7, #4]

	*pGPIOAFRL |= ( 0x7 << (2 * 4) ); // GPIOA_2 AF7 -> USART_2 RX
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]

	// PIN_3 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (3 * 2) ); // GPIOA_3 alternate mode
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 3 * 2 ) ); // GPIOA_3 ospeed
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	601a      	str	r2, [r3, #0]

	*pGPIOPUDN |= ( 0x1 << ( 3 * 2 ) ); // GPIOA_3 pudn
*/
	// AFRL

	*pGPIOAFRL |= ( 0x7 << (3 * 4) ); // GPIOA_3 AF7 -> USART_2 RX
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]

}
 80005ae:	bf00      	nop
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020000 	.word	0x40020000

080005c0 <systemClock_Init>:


void systemClock_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	uint32_t *pRCCCFGR = (uint32_t *)( (uint32_t)pRCCBaseAddr + (uint32_t)0x08U );

	*pRCCCFGR |= ( 0x02 << 2 );
	*/

}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <peripherals_Init>:

void peripherals_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
	/* UART_1 and UART_2 */


	// Enable clock for

	uint32_t *pRccBaseAddr = (uint32_t *)0x40023800U;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <peripherals_Init+0x7c>)
 80005d4:	61fb      	str	r3, [r7, #28]

	uint32_t *pRccAPB1 = (uint32_t *)( (uint32_t)pRccBaseAddr + 0x40U );
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3340      	adds	r3, #64	; 0x40
 80005da:	61bb      	str	r3, [r7, #24]
	uint32_t *pRccAPB2 = (uint32_t *)( (uint32_t)pRccBaseAddr + 0x44U );
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	3344      	adds	r3, #68	; 0x44
 80005e0:	617b      	str	r3, [r7, #20]

	*pRccAPB1 |= ( 1 << 17 );
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	601a      	str	r2, [r3, #0]
	*pRccAPB2 |= ( 1 << 4 );
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 0210 	orr.w	r2, r3, #16
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	601a      	str	r2, [r3, #0]
	// Enable interrupt

	// UART1_IRQ -> 37
	// UART2_IRQ -> 38

	uint32_t *pNvicIserBaseAddr  = (uint32_t *)0xE000E100U;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <peripherals_Init+0x80>)
 80005fc:	613b      	str	r3, [r7, #16]
	uint32_t *pNvicIser1 = (uint32_t *)( (uint32_t)pNvicIserBaseAddr + (uint32_t)0x04U );
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	3304      	adds	r3, #4
 8000602:	60fb      	str	r3, [r7, #12]

	*pNvicIser1 |= ( 1 << 5 ); // Enable interrupt for UART1
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f043 0220 	orr.w	r2, r3, #32
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	601a      	str	r2, [r3, #0]
	*pNvicIser1 |= ( 1 << 6 ); // Enable interrupt for UART2
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]

	// Set the interrupt priority for UART1

	uint32_t *pNvicIprBaseAddr = (uint32_t *)0xE000E400U;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <peripherals_Init+0x84>)
 800061e:	60bb      	str	r3, [r7, #8]
	uint32_t *pNvicIpr9 = (uint32_t *)( (uint32_t)pNvicIprBaseAddr + (uint32_t)0x24U );
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3324      	adds	r3, #36	; 0x24
 8000624:	607b      	str	r3, [r7, #4]

	*pNvicIpr9 |= ( 0x3 << ( ( 8 * 1 ) + 4 )); // Priority for UART_1 set to 3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]
	*pNvicIpr9 |= ( 0x3 << ( ( 8 * 2 ) + 4 )); // Priority for UART_2 set to 3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]


}
 800063e:	bf00      	nop
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40023800 	.word	0x40023800
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000e400 	.word	0xe000e400

08000654 <Get_SystemTimeMs>:
*
* Get SysTicCount
*
*/
uint32_t Get_SystemTimeMs(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

	return SysTickCountMs;
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <Get_SystemTimeMs+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]

}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	200004bc 	.word	0x200004bc

08000668 <Compare_SystemTimeMs>:
*
* Compare captured value with actual
*
*/
uint32_t Compare_SystemTimeMs(uint32_t capturedTimeMs)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	uint32_t ret = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]

	if(SysTickCountMs >= capturedTimeMs)
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <Compare_SystemTimeMs+0x38>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d805      	bhi.n	800068a <Compare_SystemTimeMs+0x22>
		ret = SysTickCountMs - capturedTimeMs;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <Compare_SystemTimeMs+0x38>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e004      	b.n	8000694 <Compare_SystemTimeMs+0x2c>
	else
		ret = capturedTimeMs - SysTickCountMs;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <Compare_SystemTimeMs+0x38>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	60fb      	str	r3, [r7, #12]

	return ret;
 8000694:	68fb      	ldr	r3, [r7, #12]

}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	200004bc 	.word	0x200004bc

080006a4 <uart_Init_It>:


/********************************************** Interrupt communication mode **********************************************/

void uart_Init_It(uartHandler_t *huart)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	// USARTDIV = fck / ( 16 * 9600 ) = 8.68
	// DIV_FRACTION = 16 * 0.68 = 11 = 0xB
	// DIV_MANTISSA = 8 = 0x08
	// USART_BRR = 0x08B

	huart->uart_Istance->uart_brr = 0x08BU; // 115200 baud rate
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	228b      	movs	r2, #139	; 0x8b
 80006b2:	609a      	str	r2, [r3, #8]

	/* Control register configuration CR1 */

	// word length

	huart->uart_Istance->uart_cr1 &= ~( 1 << 12 ); // 8 bits of data
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68da      	ldr	r2, [r3, #12]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006c2:	60da      	str	r2, [r3, #12]

	// uart enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 13 ); // uart enabled
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80006d2:	60da      	str	r2, [r3, #12]

	// receiver enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 2 ); // RE
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f042 0204 	orr.w	r2, r2, #4
 80006e2:	60da      	str	r2, [r3, #12]

	// transmission enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 3 ); // TE
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f042 0208 	orr.w	r2, r2, #8
 80006f2:	60da      	str	r2, [r3, #12]

	/* Control register configuration CR2 */

	// stop bits

	huart->uart_Istance->uart_cr2 &= ~( 0x3 << 12 );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	691a      	ldr	r2, [r3, #16]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000702:	611a      	str	r2, [r3, #16]


}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <uart_Start_Tx_It>:


void uart_Start_Tx_It(uartHandler_t *huart, uint8_t *dataBuff, uint32_t length)
{
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]

	if(huart->uart_TxState != UART_BUSY_IN_TX)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7f1b      	ldrb	r3, [r3, #28]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d01b      	beq.n	800075a <uart_Start_Tx_It+0x4c>
	{

		huart->uart_TxState = UART_BUSY_IN_TX;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2201      	movs	r2, #1
 8000726:	771a      	strb	r2, [r3, #28]
		huart->uart_dataBuffTx = dataBuff;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	605a      	str	r2, [r3, #4]
		huart->uart_IndexTx = 0;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
		huart->uart_ContTx = length;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	60da      	str	r2, [r3, #12]

		// TC interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 6 ); // TCIE
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000748:	60da      	str	r2, [r3, #12]

		// TXE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 7 ); // TXEIE
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000758:	60da      	str	r2, [r3, #12]

	}

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <uart_Start_Rx_It>:

void uart_Start_Rx_It(uartHandler_t *huart, uint8_t *dataBuff, uint32_t length)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]

	if(huart->uart_RxState != UART_BUSY_IN_RX)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	7f5b      	ldrb	r3, [r3, #29]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d013      	beq.n	80007a0 <uart_Start_Rx_It+0x3c>
	{

		huart->uart_RxState = UART_BUSY_IN_RX;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2202      	movs	r2, #2
 800077c:	775a      	strb	r2, [r3, #29]
		huart->uart_dataBuffRx = dataBuff;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	611a      	str	r2, [r3, #16]
		huart->uart_IndexRx = 0;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
		huart->uart_ContRx = length;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	619a      	str	r2, [r3, #24]

		// RXNE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 5 ); // RXNEIE
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68da      	ldr	r2, [r3, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0220 	orr.w	r2, r2, #32
 800079e:	60da      	str	r2, [r3, #12]

	}

}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <uart_End_Rx_It>:

void uart_End_Rx_It(uartHandler_t *huart)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]


	huart->uart_RxState = UART_READY;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	775a      	strb	r2, [r3, #29]
	huart->uart_IndexRx = 0;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
	huart->uart_ContRx = 0;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]

	// RXNE interrupt disable

	huart->uart_Istance->uart_cr1 &= ~( 1 << 5 ); // RXNEIE
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0220 	bic.w	r2, r2, #32
 80007d2:	60da      	str	r2, [r3, #12]

}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <Uart_IRQHandler>:

void Uart_IRQHandler(uartHandler_t *huart)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
	uint32_t temp1;


	/*************************Check for TC flag ********************************************/

	temp1 = ( huart->uart_Istance->uart_sr & ( 1 << 6 ) );
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f0:	60fb      	str	r3, [r7, #12]

	if(temp1)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d021      	beq.n	800083c <Uart_IRQHandler+0x5e>
	{

		// Interrupt due to TC flag

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7f1b      	ldrb	r3, [r3, #28]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d11d      	bne.n	800083c <Uart_IRQHandler+0x5e>
		{

			if(huart->uart_ContTx == 0)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d119      	bne.n	800083c <Uart_IRQHandler+0x5e>
			{

				// Close the transmission

				// Clear the TC flag (otherwise it remains 1)
				huart->uart_Istance->uart_sr &= ~( 1 << 6 );
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000816:	601a      	str	r2, [r3, #0]

				//Reset the application state
				huart->uart_TxState = UART_READY;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	771a      	strb	r2, [r3, #28]

				//Reset Buffer address to NULL
				//huart->uart_dataBuffTx = NULL;

				//Reset the length to zero
				huart->uart_ContTx = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]

				//Implement the code to clear the TCIE bit (disable interrupt for TC flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 6 );
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000832:	60da      	str	r2, [r3, #12]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(huart, USART_EVENT_TX_CMPLT);
 8000834:	2100      	movs	r1, #0
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fdec 	bl	8000414 <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = huart->uart_Istance->uart_sr & ( 1 << 7 );
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]

	if(temp1)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d026      	beq.n	800089c <Uart_IRQHandler+0xbe>
	{

		//this interrupt is because of TXE

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7f1b      	ldrb	r3, [r3, #28]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d122      	bne.n	800089c <Uart_IRQHandler+0xbe>
		{
			//Keep sending data until Txlen reaches to zero
			if(huart->uart_ContTx > 0)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d012      	beq.n	8000884 <Uart_IRQHandler+0xa6>
			{

					//This is 8bit data transfer
					huart->uart_Istance->uart_dr = ( huart->uart_dataBuffTx[huart->uart_IndexTx] );
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4413      	add	r3, r2
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					huart->uart_IndexTx++;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	609a      	str	r2, [r3, #8]
					huart->uart_ContTx -= 1;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60da      	str	r2, [r3, #12]

			}

			if (huart->uart_ContTx == 0 )
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <Uart_IRQHandler+0xbe>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 7 );
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	68da      	ldr	r2, [r3, #12]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800089a:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = huart->uart_Istance->uart_sr & ( 1 << 5 );
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	60fb      	str	r3, [r7, #12]

	if(temp1)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d02e      	beq.n	800090c <Uart_IRQHandler+0x12e>
	{

		//this interrupt is because of rxne

		if(huart->uart_RxState == UART_BUSY_IN_RX)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7f5b      	ldrb	r3, [r3, #29]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d12a      	bne.n	800090c <Uart_IRQHandler+0x12e>
		{
			if(huart->uart_ContRx > 0)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d013      	beq.n	80008e6 <Uart_IRQHandler+0x108>
			{

				//We are going to receive 8bit data in a frame

				//read 8 bits from DR
				huart->uart_dataBuffRx[huart->uart_IndexRx] = (uint8_t)( huart->uart_Istance->uart_dr );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6859      	ldr	r1, [r3, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4413      	add	r3, r2
 80008ce:	b2ca      	uxtb	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]

				//Now , increment the pRxBuffer
				huart->uart_IndexRx++;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	615a      	str	r2, [r3, #20]
				huart->uart_ContRx -= 1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	619a      	str	r2, [r3, #24]

			}

			if(!huart->uart_ContRx )
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10e      	bne.n	800090c <Uart_IRQHandler+0x12e>
			{
				//disable the rxne
				huart->uart_Istance->uart_cr1 &= ~( 1 << 5 );
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0220 	bic.w	r2, r2, #32
 80008fc:	60da      	str	r2, [r3, #12]
				huart->uart_RxState = UART_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	775a      	strb	r2, [r3, #29]
				USART_ApplicationEventCallback(huart, USART_EVENT_RX_CMPLT);
 8000904:	2101      	movs	r1, #1
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fd84 	bl	8000414 <USART_ApplicationEventCallback>
			}
		}
	}

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000916:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000918:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000942:	f000 f811 	bl	8000968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fc81 	bl	800024c <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   r0, =_estack
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000958:	080009fc 	.word	0x080009fc
  ldr r2, =_sbss
 800095c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000960:	200004c0 	.word	0x200004c0

08000964 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <__libc_init_array>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4d0d      	ldr	r5, [pc, #52]	; (80009a0 <__libc_init_array+0x38>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	; (80009a4 <__libc_init_array+0x3c>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	2600      	movs	r6, #0
 8000974:	42a6      	cmp	r6, r4
 8000976:	d109      	bne.n	800098c <__libc_init_array+0x24>
 8000978:	4d0b      	ldr	r5, [pc, #44]	; (80009a8 <__libc_init_array+0x40>)
 800097a:	4c0c      	ldr	r4, [pc, #48]	; (80009ac <__libc_init_array+0x44>)
 800097c:	f000 f820 	bl	80009c0 <_init>
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	2600      	movs	r6, #0
 8000986:	42a6      	cmp	r6, r4
 8000988:	d105      	bne.n	8000996 <__libc_init_array+0x2e>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000990:	4798      	blx	r3
 8000992:	3601      	adds	r6, #1
 8000994:	e7ee      	b.n	8000974 <__libc_init_array+0xc>
 8000996:	f855 3b04 	ldr.w	r3, [r5], #4
 800099a:	4798      	blx	r3
 800099c:	3601      	adds	r6, #1
 800099e:	e7f2      	b.n	8000986 <__libc_init_array+0x1e>
 80009a0:	080009f4 	.word	0x080009f4
 80009a4:	080009f4 	.word	0x080009f4
 80009a8:	080009f4 	.word	0x080009f4
 80009ac:	080009f8 	.word	0x080009f8

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
